type Article {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  content: String!
  slug: String!
  user: UsersPermissionsUser
  publishDate: Date
  status: ENUM_ARTICLE_STATUS!
}

type ArticleAggregator {
  count: Int
  totalCount: Int
}

type ArticleConnection {
  values: [Article]
  groupBy: ArticleGroupBy
  aggregate: ArticleAggregator
}

type ArticleConnectionContent {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionCreated_at {
  key: DateTime
  connection: ArticleConnection
}

type ArticleConnectionId {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionPublishDate {
  key: ID
  connection: ArticleConnection
}

type ArticleConnectionSlug {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionStatus {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionTitle {
  key: String
  connection: ArticleConnection
}

type ArticleConnectionUpdated_at {
  key: DateTime
  connection: ArticleConnection
}

type ArticleConnectionUser {
  key: ID
  connection: ArticleConnection
}

type ArticleGroupBy {
  id: [ArticleConnectionId]
  created_at: [ArticleConnectionCreated_at]
  updated_at: [ArticleConnectionUpdated_at]
  title: [ArticleConnectionTitle]
  content: [ArticleConnectionContent]
  slug: [ArticleConnectionSlug]
  user: [ArticleConnectionUser]
  publishDate: [ArticleConnectionPublishDate]
  status: [ArticleConnectionStatus]
}

input ArticleInput {
  title: String!
  content: String!
  slug: String!
  user: ID
  publishDate: Date
  status: ENUM_ARTICLE_STATUS!
}

type Categories {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  restaurants(sort: String, limit: Int, start: Int, where: JSON): [Restaurant]
}

type CategoriesAggregator {
  count: Int
  totalCount: Int
}

type CategoriesConnection {
  values: [Categories]
  groupBy: CategoriesGroupBy
  aggregate: CategoriesAggregator
}

type CategoriesConnectionCreated_at {
  key: DateTime
  connection: CategoriesConnection
}

type CategoriesConnectionId {
  key: ID
  connection: CategoriesConnection
}

type CategoriesConnectionName {
  key: String
  connection: CategoriesConnection
}

type CategoriesConnectionUpdated_at {
  key: DateTime
  connection: CategoriesConnection
}

type CategoriesGroupBy {
  id: [CategoriesConnectionId]
  created_at: [CategoriesConnectionCreated_at]
  updated_at: [CategoriesConnectionUpdated_at]
  name: [CategoriesConnectionName]
}

input CategoryInput {
  name: String!
  restaurants: [ID]
}

input createArticleInput {
  data: ArticleInput
}

type createArticlePayload {
  article: Article
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Categories
}

input createFileInput {
  data: FileInput
}

type createFilePayload {
  file: UploadFile
}

input createHitInput {
  data: HitInput
}

type createHitPayload {
  hit: Hit
}

input createRestaurantInput {
  data: RestaurantInput
}

type createRestaurantPayload {
  restaurant: Restaurant
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTokenInput {
  data: TokenInput
}

type createTokenPayload {
  token: Token
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteArticleInput {
  where: InputID
}

type deleteArticlePayload {
  article: Article
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Categories
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

input deleteHitInput {
  where: InputID
}

type deleteHitPayload {
  hit: Hit
}

input deleteRestaurantInput {
  where: InputID
}

type deleteRestaurantPayload {
  restaurant: Restaurant
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTokenInput {
  where: InputID
}

type deleteTokenPayload {
  token: Token
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editArticleInput {
  title: String
  content: String
  slug: String
  user: ID
  publishDate: Date
  status: ENUM_ARTICLE_STATUS
}

input editCategoryInput {
  name: String
  restaurants: [ID]
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editHitInput {
  count: Int
  date: Date
}

input editRestaurantInput {
  Name: String
  Description: String
  categories: [ID]
  chefs: [ID]
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editTokenInput {
  token: String
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  tokens: [ID]
  articles: [ID]
  restaurant: ID
}

enum ENUM_ARTICLE_STATUS {
  draft
  published
  archive
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

type ForgotPassword {
  ok: Boolean
}

type Hit {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  count: Int
  date: Date
}

type HitAggregator {
  count: Int
  totalCount: Int
  sum: HitAggregatorSum
  avg: HitAggregatorAvg
  min: HitAggregatorMin
  max: HitAggregatorMax
}

type HitAggregatorAvg {
  count: Float
}

type HitAggregatorMax {
  count: Float
}

type HitAggregatorMin {
  count: Float
}

type HitAggregatorSum {
  count: Float
}

type HitConnection {
  values: [Hit]
  groupBy: HitGroupBy
  aggregate: HitAggregator
}

type HitConnectionCount {
  key: Int
  connection: HitConnection
}

type HitConnectionCreated_at {
  key: DateTime
  connection: HitConnection
}

type HitConnectionDate {
  key: ID
  connection: HitConnection
}

type HitConnectionId {
  key: ID
  connection: HitConnection
}

type HitConnectionUpdated_at {
  key: DateTime
  connection: HitConnection
}

type HitGroupBy {
  id: [HitConnectionId]
  created_at: [HitConnectionCreated_at]
  updated_at: [HitConnectionUpdated_at]
  count: [HitConnectionCount]
  date: [HitConnectionDate]
}

input HitInput {
  count: Int
  date: Date
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | ForgotPassword | Article | ArticleConnection | ArticleAggregator | ArticleGroupBy | ArticleConnectionId | ArticleConnectionCreated_at | ArticleConnectionUpdated_at | ArticleConnectionTitle | ArticleConnectionContent | ArticleConnectionSlug | ArticleConnectionUser | ArticleConnectionPublishDate | ArticleConnectionStatus | createArticlePayload | updateArticlePayload | deleteArticlePayload | Categories | CategoriesConnection | CategoriesAggregator | CategoriesGroupBy | CategoriesConnectionId | CategoriesConnectionCreated_at | CategoriesConnectionUpdated_at | CategoriesConnectionName | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | Hit | HitConnection | HitAggregator | HitAggregatorSum | HitAggregatorAvg | HitAggregatorMin | HitAggregatorMax | HitGroupBy | HitConnectionId | HitConnectionCreated_at | HitConnectionUpdated_at | HitConnectionCount | HitConnectionDate | createHitPayload | updateHitPayload | deleteHitPayload | Restaurant | RestaurantConnection | RestaurantAggregator | RestaurantGroupBy | RestaurantConnectionId | RestaurantConnectionCreated_at | RestaurantConnectionUpdated_at | RestaurantConnectionName | RestaurantConnectionDescription | createRestaurantPayload | updateRestaurantPayload | deleteRestaurantPayload | Token | TokenConnection | TokenAggregator | TokenGroupBy | TokenConnectionId | TokenConnectionCreated_at | TokenConnectionUpdated_at | TokenConnectionToken | createTokenPayload | updateTokenPayload | deleteTokenPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | createFilePayload | updateFilePayload | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionRestaurant | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createArticle(input: createArticleInput): createArticlePayload
  updateArticle(input: updateArticleInput): updateArticlePayload
  deleteArticle(input: deleteArticleInput): deleteArticlePayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createHit(input: createHitInput): createHitPayload
  updateHit(input: updateHitInput): updateHitPayload
  deleteHit(input: deleteHitInput): deleteHitPayload
  createRestaurant(input: createRestaurantInput): createRestaurantPayload
  updateRestaurant(input: updateRestaurantInput): updateRestaurantPayload
  deleteRestaurant(input: deleteRestaurantInput): deleteRestaurantPayload
  createToken(input: createTokenInput): createTokenPayload
  updateToken(input: updateTokenInput): updateTokenPayload
  deleteToken(input: deleteTokenInput): deleteTokenPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UserInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): ForgotPassword
  changePassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Query {
  article(id: ID!): Article
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  articlesConnection(sort: String, limit: Int, start: Int, where: JSON): ArticleConnection
  category(id: ID!): Categories
  categories(sort: String, limit: Int, start: Int, where: JSON): [Categories]
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CategoriesConnection
  hit(id: ID!): Hit
  hits(sort: String, limit: Int, start: Int, where: JSON): [Hit]
  hitsConnection(sort: String, limit: Int, start: Int, where: JSON): HitConnection
  restaurant(id: ID!): Restaurant
  restaurants(sort: String, limit: Int, start: Int, where: JSON): [Restaurant]
  restaurantsConnection(sort: String, limit: Int, start: Int, where: JSON): RestaurantConnection
  token(id: ID!): Token
  tokens(sort: String, limit: Int, start: Int, where: JSON): [Token]
  tokensConnection(sort: String, limit: Int, start: Int, where: JSON): TokenConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  restaurantsCount(where: JSON): Int!
  me: UsersPermissionsMe
}

type Restaurant {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Name: String!
  Description: String
  categories(sort: String, limit: Int, start: Int, where: JSON): [Categories]
  chefs(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type RestaurantAggregator {
  count: Int
  totalCount: Int
}

type RestaurantConnection {
  values: [Restaurant]
  groupBy: RestaurantGroupBy
  aggregate: RestaurantAggregator
}

type RestaurantConnectionCreated_at {
  key: DateTime
  connection: RestaurantConnection
}

type RestaurantConnectionDescription {
  key: String
  connection: RestaurantConnection
}

type RestaurantConnectionId {
  key: ID
  connection: RestaurantConnection
}

type RestaurantConnectionName {
  key: String
  connection: RestaurantConnection
}

type RestaurantConnectionUpdated_at {
  key: DateTime
  connection: RestaurantConnection
}

type RestaurantGroupBy {
  id: [RestaurantConnectionId]
  created_at: [RestaurantConnectionCreated_at]
  updated_at: [RestaurantConnectionUpdated_at]
  Name: [RestaurantConnectionName]
  Description: [RestaurantConnectionDescription]
}

input RestaurantInput {
  Name: String!
  Description: String
  categories: [ID]
  chefs: [ID]
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

type Token {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  token: String!
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type TokenAggregator {
  count: Int
  totalCount: Int
}

type TokenConnection {
  values: [Token]
  groupBy: TokenGroupBy
  aggregate: TokenAggregator
}

type TokenConnectionCreated_at {
  key: DateTime
  connection: TokenConnection
}

type TokenConnectionId {
  key: ID
  connection: TokenConnection
}

type TokenConnectionToken {
  key: String
  connection: TokenConnection
}

type TokenConnectionUpdated_at {
  key: DateTime
  connection: TokenConnection
}

type TokenGroupBy {
  id: [TokenConnectionId]
  created_at: [TokenConnectionCreated_at]
  updated_at: [TokenConnectionUpdated_at]
  token: [TokenConnectionToken]
}

input TokenInput {
  token: String!
  users: [ID]
}

input updateArticleInput {
  where: InputID
  data: editArticleInput
}

type updateArticlePayload {
  article: Article
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Categories
}

input updateFileInput {
  where: InputID
  data: editFileInput
}

type updateFilePayload {
  file: UploadFile
}

input updateHitInput {
  where: InputID
  data: editHitInput
}

type updateHitPayload {
  hit: Hit
}

input updateRestaurantInput {
  where: InputID
  data: editRestaurantInput
}

type updateRestaurantPayload {
  restaurant: Restaurant
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTokenInput {
  where: InputID
  data: editTokenInput
}

type updateTokenPayload {
  token: Token
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  tokens: [ID]
  articles: [ID]
  restaurant: ID
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  restaurant: Restaurant
  tokens(sort: String, limit: Int, start: Int, where: JSON): [Token]
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRestaurant {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  restaurant: [UsersPermissionsUserConnectionRestaurant]
}
